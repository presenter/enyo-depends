#!/usr/bin/env node

/**
 * Module dependencies.
 */

var program = require('commander');
var request = require('request');
var fs = require('fs-extra');
var path = require('path');
var AdmZip = require('adm-zip');
var semver = require('semver');
var async = require('async');
var _ = require('underscore');

program.version('0.0.5');
program.option('install [username/repo@branch]', 'Install an Enyo library');
program.option('uninstall [name]', 'Uninstall an Enyo library', '');
program.option('init', 'Initialize enyo-depends in an enyo app', '');
program.option('--enyo [location]', 'Specify the location of Enyo', 'enyo');
program.option('--alias [name]', 'Install library under given name', '')
program.option('--noenyo', 'Turns off checking for Enyo');
program.option('--nodepends', 'Turns off including library in dependencies');
program.parse(process.argv);

console.log('');

//Default the enyo version to 2.0.0.
var enyoVersion = '2.0.0';
var lib = './lib';
var myjson = {};

function loadjson(){
	if(fs.existsSync('./enyo.json')){
		try{
			myjson = JSON.parse(fs.readFileSync('./enyo.json', 'utf8'));
		}catch(e){}
	}
}
loadjson();

if(myjson){
	program.enyo = myjson.enyo || 'enyo';
}

if(!fs.existsSync(program.enyo) && !program.noenyo){
	console.log('We could not find EnyoJS in this folder.');
	console.log('');
	return;
}

if(myjson && myjson.lib){
	lib = myjson.lib;
}

var pack = myjson.package || 'source/package.js';

//Get the version of enyo installed:
var enyoPackage = path.normalize(program.enyo + '/package.json');
if(fs.existsSync(enyoPackage)){
	var enyoPackageJson = fs.readFileSync(enyoPackage, 'utf8');
	var penyo;
	try{
		penyo = JSON.parse(enyoPackageJson);
	}catch(e){};
	
	if(penyo){
		enyoVersion = penyo.version || '2.0.0';
	}
}

//Boilerplate enyo.json file:
var bare = {
	"name": "my-app",
	"description": "A simple app using enyo and enyo-depends.",
	"version": "1.0.0",
	"package": "source/package.js",
	"dependencies": {},
	"engines": {
		"enyo": enyoVersion
	}
}

if(program.install && program.install !== true){
	depends(program.install, false, program.alias, function(){
		process.exit();
	});
}else if (program.uninstall){
	uninstall(program.uninstall);
}else if(program.init){
	init(true);
}else if(program.install === true){
	if(myjson && myjson.dependencies){
		console.log('Installing Application Dependencies...');
		_.each(myjson.dependencies, function(v, k){
			depends(v, true, k, function(){
				console.log('Application Dependencies Successfully Installed');
				process.exit();
			});
		});
	}else{
		console.log('No enyo.json file found.');
	}
}else{
	program.help();
}

//TODO: This needs some reworking. Maybe loop over the lib directory and when we spot an enyo.json file check for conflict to prevent accidental uninstalling common libraries. Either that or only have uninstall remove the main installed library by default and not its dependencies.
function uninstall(uninstall){
	
	var name = uninstall;
	
	//Uninstall
	var p = path.normalize(lib + '/' + name);
	if(!fs.existsSync(p)){
		console.log('Library is not installed.');
	}else{
		console.log('Uninstalling: ' + name);
		var otherjson;
		if(fs.existsSync(p + '/enyo.json')){
			try{
				otherjson = JSON.parse(fs.readFileSync(p+ '/enyo.json', 'utf8'));
			}catch(e){}
		}
		if(otherjson && otherjson.dependencies){
			var mine = _.values((myjson || {}).dependencies || {});
			mine = _.map(mine, function(k){
				return k.toLowerCase();
			});
			_.each(otherjson.dependencies, function(k, v){
				if(mine.indexOf(k.toLowerCase()) <= -1){
					console.log('  └── Uninstalling: ' + v);
					fs.removeSync(lib + '/' + v);
				}
			});
		}
		//Remove Root Directory.
		fs.removeSync(p);
		if(myjson){
			delete myjson.dependencies[name];
			fs.writeFileSync('./enyo.json', JSON.stringify(myjson, null, 4));
		}
		console.log('Library uninstalled.');
	}
}

//Creates a barebones enyo.json file:
function init(verbose){
	if(!fs.existsSync('./enyo.json')){
		fs.writeFileSync('./enyo.json', JSON.stringify(bare, null, 4));
		if(verbose){
			console.log('Created enyo.json file.');
		}
	}else{
		if(verbose){
			console.log('An enyo.json file already exists.');
		}
	}
};

//Main dependency manager:
function depends(install, recursive, alias, done){
	
	if(!recursive){
		console.log('Installing: ' + install);
	}else{
		console.log('  └── Installing: ' + install);
	}
	
	var branch = 'master';
	if(install.indexOf('@') > -1){
		branch = install.split('@');
		branch = branch[branch.length - 1];
		install = install.substring(0, install.lastIndexOf('@'));
	}
	
	//Grab the raw name:
	var name = install.split('/');
	name = name[name.length-1];
	
	var fname = alias || name;
	
	if(fs.existsSync('./' + lib + '/' + fname + '/')){
		if(!recursive){
			console.log('The library or alias you are trying to install already exists.');
		}else{
			console.log('    Library "' + fname + '" already exists.');
		}
		done();
		return;
	}
	
	//Get the zip file from GitHub:
	var fileUrl = 'https://github.com/' + install + '/archive/' + branch + '.zip';
	var output = './' + lib +'/' + name + Math.round(Math.random() * 1000000000) + '.zip';
	request({url: fileUrl, encoding: null}, function(err, resp, body) {
		if(err) throw err;
		
		//Make sure we're getting something workable (i.e. a zip file);
		var ts = body.toString();
		if(ts.length < 5 || resp.statusCode === 404 | resp.statusCode === 500){
			console.log('We could not find the package. Please make sure it was typed correctly.');
			done();
			return;
		}
		
		//Make the lib folder if it doesn't already exist:
		if(!fs.existsSync('./' + lib + '/')){
			fs.mkdirSync('./' + lib + '/');
		}
		
		//Write the zip file first:
		fs.writeFile(output, body, function(err) {
			if(err) throw err;
			
			//Set up zip reader:
			var zip = new AdmZip(output);
			
			//Try to get dependencies:
			var enyojson = zip.readAsText(name + '-' + branch + '/enyo.json');
			var enyo;
			try{
				enyo = JSON.parse(enyojson);
			}catch(e){};
			
			var finished = function(){
				
				//Extract the library:
				zip.extractAllTo('./' + lib + '/', true);
				//When pulling archives from github, they'll export as repo-branch. This renames the folder to just name.
				fs.renameSync('./' + lib + '/' + name + '-' + branch + '/', './' + lib + '/' + fname + '/');
				fs.unlinkSync(output);
			
				//Make sure we have an enyo.json file in our project:
				if(!recursive && !program.nodepends){
					init();
					loadjson();
					if(myjson){
						myjson.dependencies[fname] = install;
						fs.writeFileSync('./enyo.json', JSON.stringify(myjson, null, 4));
					}
					console.log('Library Successfully Installed');
				}else{
					console.log('    - Library Successfully Installed');
					done();
				}
			}
			
			//Check to see if it's eligible for auto package.json inclusion. Anything in the enyojs repo is eligible, and anything with enyo.json is as well.
			//TODO: Check to see if the library is already included in packagejs.
			//TODO: Remove on uninstall:
			if(!program.nodepends && (path.normalize(lib + '/') === 'lib/') && ((enyojson && enyo) || install.split('/')[0].toLowerCase() === 'enyojs')){
				if(fs.existsSync(pack)){
					var packagejs = fs.readFileSync(pack, 'utf8');
					packagejsmin = packagejs.replace(/(\s|\r|\n|\t)/g, '');
					packagejsmin = packagejsmin.replace(/(\/\*[\w\'\s\r\n\*]*\*\/)|(\/\/[\w\s\']*)|(\<![\-\-\s\w\>\/]*\>)/g, '');
					//Basically, do we need a comma:
					var left = packagejsmin.lastIndexOf('(');
					
					//Let them set their own source file:
					var packagename = fname;
					if(enyo && enyo.package && enyo.package.replace('/', '') !== 'package.js'){
						packagename = path.normalize(fname + '/' + enyo.package);
					};
					
					var fullname;
					if(packagejsmin.lastIndexOf(')') > (left + 1)){
						fullname = '\t"$lib/' + packagename + '",';
					}else{
						fullname = '\n\t"$lib/' + packagename + '"\n';
					}
					
					//Make things look pretty:
					var offset = 1;
					if(packagejs.charAt(packagejs.lastIndexOf('(') + 1) === '\n'){
						offset = 2;
					}
					
					packagejs = packagejs.substring(0,left + offset) + fullname + packagejs.substring(left + 1);
					fs.writeFileSync(pack, packagejs);
				}
			}
			
			//It has an enyo.json file
			if(enyojson && enyo){
				
				//First check engine version:
				if(enyo.engines && enyo.engines.enyo && !semver.satisfies(enyoVersion, enyo.engines.enyo)){
					console.log('    WARNING: Library ' + name + ' requires enyo ' + enyo.engines.enyo + ', but you are using ' + enyoVersion + '.');
					console.log('    Library may behave unexpectedly.');
				}
				
				if(Object.keys(enyo.dependencies) <= 0){
					finished();
				}else{
					var series = [];
					for(var x in enyo.dependencies){
						if(enyo.dependencies.hasOwnProperty(x)){
							(function(){
								var s = "" + enyo.dependencies[x];
								var j = "" + x;
								series.push(function(callback){
									depends(s, true, j, callback);
								});
							})();
						}
					}
					async.series(series, function(){
						finished();
					});
				}
			}else{
				finished();
			}
		});
	});
};